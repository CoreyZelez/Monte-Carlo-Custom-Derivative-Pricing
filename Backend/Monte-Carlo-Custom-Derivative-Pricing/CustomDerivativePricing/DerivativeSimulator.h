#pragma once
#include "AssetModel.h"
#include "AssetDerivative.h"
#include <vector>
#include <map>
#include <deque>

#ifdef CUSTOM_DERIVATIVE_PRICING_API_EXPORTS
#define CUSTOM_DERIVATIVE_PRICING_API __declspec(dllexport)
#else
#define CUSTOM_DERIVATIVE_PRICING_API __declspec(dllimport)
#endif

class CUSTOM_DERIVATIVE_PRICING_API DerivativeSimulator
{
public:
	DerivativeSimulator(std::unique_ptr<AssetDerivative> derivative, AssetModel model);

	/// @brief Simulates possible paths for the asset price based on the asset price model. Utilizes multiple threads.
	/// @param numThreads The number of threads used to simulate prices.
	/// @param numSimulations The number of price simulations per thread.
	/// @param numDays The number of days prices are simulated for.
	void runAssetSimulations(int numThreads, int numSimulations, int numDays);

	bool hasAssetData(int simIndex, int day, AssetDataClass dataClass) const;
	std::any getAssetData(int simIndex, int day, AssetDataClass dataClass) const;

private:
	const AssetModel model;  // The initial model of each simulation.
	std::unique_ptr<AssetDerivative> derivative;

	int assetDataRecordedSimulations = 1000;  // Number of days that asset data is recorded for.
	std::deque<std::map<int, std::map<AssetDataClass, std::any>>> assetData;  // [Sim Index][Day][Data Class] // Asset data generated by simulations.
	std::deque<std::map<int, double>> derivativeExecutionValues;  // [Sim Index][Day]
	std::deque<std::map<int, double>> derivativePresentValues;  // [Sim Index][Day] 

	/// @brief Simulates possible paths for the asset price based on the asset price model.
	/// @param numSimulations The number of price simulations per thread.
	void simulateAsset(int threadNum, int numSimulations, int numDays);

	void recordAssetData(const AssetModel& model, int simIndex, int day);
};

extern "C"
{
	CUSTOM_DERIVATIVE_PRICING_API DerivativeSimulator* DerivativeSimulator_new(AssetDerivative* derivative, AssetModel* model);
	CUSTOM_DERIVATIVE_PRICING_API void DerivativeSimulator_delete(DerivativeSimulator* obj);
	CUSTOM_DERIVATIVE_PRICING_API void DerivativeSimulator_runAssetSimulations(DerivativeSimulator* obj, int numThreads, int numSimulations, int numDays);
	CUSTOM_DERIVATIVE_PRICING_API bool DerivativeSimulator_hasAssetData(DerivativeSimulator* obj, int simIndex, int day, int assetDataClass);
	CUSTOM_DERIVATIVE_PRICING_API int DerivativeSimulator_getIntAssetData(DerivativeSimulator* obj, int simIndex, int day, int assetDataClass);

}

