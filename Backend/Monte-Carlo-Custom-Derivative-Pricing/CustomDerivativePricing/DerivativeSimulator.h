#pragma once
#include "AssetModel.h"
#include <vector>
#include <map>
#include <deque>

#ifdef CUSTOM_DERIVATIVE_PRICING_API_EXPORTS
#define CUSTOM_DERIVATIVE_PRICING_API __declspec(dllexport)
#else
#define CUSTOM_DERIVATIVE_PRICING_API __declspec(dllimport)
#endif

class CUSTOM_DERIVATIVE_PRICING_API DerivativeSimulator
{
public:
	DerivativeSimulator(AssetModel model);

	/// @brief Simulates possible paths for the asset price based on the asset price model. Utilizes multiple threads.
	/// @param numThreads The number of threads used to simulate prices.
	/// @param numSimulations The number of price simulations per thread.
	/// @param numDays The number of days prices are simulated for.
	void runAssetSimulations(int numThreads, int numSimulations, int numDays);

private:
	const AssetModel model;  // The initial model of each simulation.
	std::deque<std::map<int, std::map<std::string, std::any>>> data;  // Data generated by simulations.

	/// @brief Simulates possible paths for the asset price based on the asset price model.
	/// @param numSimulations The number of price simulations per thread.
	void simulateAsset(int threadNum, int numSimulations, int numDays);
};

extern "C"
{
	CUSTOM_DERIVATIVE_PRICING_API DerivativeSimulator* DerivativeSimulator_new(AssetModel* model);
	CUSTOM_DERIVATIVE_PRICING_API void DerivativeSimulator_delete(DerivativeSimulator* obj);
	CUSTOM_DERIVATIVE_PRICING_API void DerivativeSimulator_runSimulations(DerivativeSimulator* obj, int numThreads, int numSimulations, int numDays);
}

