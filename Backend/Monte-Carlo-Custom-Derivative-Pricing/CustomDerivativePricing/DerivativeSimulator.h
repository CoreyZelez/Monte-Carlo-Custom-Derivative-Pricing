#pragma once
#include "AssetModel.h"
#include "AssetDerivative.h"
#include "DerivativeDataClass.h"
#include <vector>
#include <map>
#include <deque>

#ifdef CUSTOM_DERIVATIVE_PRICING_API_EXPORTS
#define CUSTOM_DERIVATIVE_PRICING_API __declspec(dllexport)
#else
#define CUSTOM_DERIVATIVE_PRICING_API __declspec(dllimport)
#endif

class CUSTOM_DERIVATIVE_PRICING_API DerivativeSimulator
{
public:
	DerivativeSimulator(AssetModel model, std::vector<std::unique_ptr<AssetDerivative>> &derivatives);

	DerivativeSimulator(const DerivativeSimulator&) = delete;
	DerivativeSimulator& operator=(const DerivativeSimulator&) = delete;

	/// @brief Simulates possible paths for the asset price based on the asset price model. Utilizes multiple threads.
	/// @param numThreads The number of threads used to simulate prices.
	/// @param numSimulations The number of price simulations per thread.
	/// @param numDays The number of days prices are simulated for.
	void runSimulations(int numThreads, int numSimulations, int numDays);

	bool hasAssetData(int simIndex, int day, AssetDataClass dataClass) const;
	bool hasDerivativeData(int simIndex, int derivativeIndex, int day, DerivativeDataClass dataClass) const;
	std::any getAssetData(int simIndex, int day, AssetDataClass dataClass) const;
	double getDerivativeData(int simIndex, int derivativeIndex, int day, DerivativeDataClass dataClass) const;

private:
	const AssetModel model;  // The initial model of each simulation.
	std::vector<std::unique_ptr<AssetDerivative>> derivatives;

	std::deque<std::map<int, std::map<AssetDataClass, std::any>>> assetData;  // [Sim Index][Day][Data Class] // Asset data generated by simulations.
	std::deque<std::deque<std::map<int, std::map<DerivativeDataClass, double>>>> derivativeData;  // [Sim Index][Derivative Index][Day][Data Class]

	/// @brief Simulates asset price using model and determines derivative values.
	/// @param threadNum The number of price simulations per thread.
	/// @param numSimulations The number of price simulations per thread.
	/// @param numDays The number of days per simulation.
	void simulate(int threadNum, int numSimulations, int numDays);
};


extern "C"
{
	CUSTOM_DERIVATIVE_PRICING_API DerivativeSimulator* derivative_simulator_create(AssetModel* model, std::vector<std::unique_ptr<AssetDerivative>>* derivatives);
	CUSTOM_DERIVATIVE_PRICING_API void derivative_simulator_delete(DerivativeSimulator* simulator);

	CUSTOM_DERIVATIVE_PRICING_API void derivative_simulator_run_simulations(DerivativeSimulator* simulator, int numThreads, int numSimulations, int numDays);

	CUSTOM_DERIVATIVE_PRICING_API bool derivative_simulator_has_asset_data(DerivativeSimulator* simulator, int simIndex, int day, AssetDataClass dataClass);
	CUSTOM_DERIVATIVE_PRICING_API bool derivative_simulator_has_derivative_data(DerivativeSimulator* simulator, int simIndex, int derivativeIndex, int day, DerivativeDataClass dataClass);

	CUSTOM_DERIVATIVE_PRICING_API double derivative_simulator_get_asset_data_as_double(DerivativeSimulator* simulator, int simIndex, int day, AssetDataClass dataClass);
	CUSTOM_DERIVATIVE_PRICING_API int derivative_simulator_get_asset_data_as_int(DerivativeSimulator* simulator, int simIndex, int day, AssetDataClass dataClass);
	CUSTOM_DERIVATIVE_PRICING_API double derivative_simulator_get_derivative_data(DerivativeSimulator* simulator, int simIndex, int derivativeIndex, int day, DerivativeDataClass dataClass);
}
